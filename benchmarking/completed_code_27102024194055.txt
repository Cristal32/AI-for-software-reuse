The original code seems to be working fine, but we can make it more reusable and maintainable by creating a base class for shapes and having each shape derive from it. This would allow us to remove the repetitive patterns in the functions and make the code more generic.

Additionally, we can create a function to calculate the areas and reuse it for different shapes. Here's how you could refactor the code:

```python
import math

class Shape:
    def calculate_area(self):
        pass

class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def calculate_area(self):
        return self.length * self.width

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def calculate_area(self):
        return math.pi * self.radius * self.radius

class Triangle(Shape):
    def __init__(self, base, height):
        self.base = base
        self.height = height

    def calculate_area(self):
        return 0.5 * self.base * self.height

# Now, you can create objects of different shapes and calculate their areas
rectangle = Rectangle(5, 10)
circle = Circle(7)
triangle = Triangle(4, 8)

shapes = [rectangle, circle, triangle]

for shape in shapes:
    print(f"{shape.__class__.__name__} Area: {shape.calculate_area()}")
```

This way, you've avoided boilerplate code and made the code more reusable and maintainable. Each shape's area calculation is contained in its own class, and you can easily add more shapes by creating new classes that derive from the `Shape` class.

Note that the `calculate_area` function in the base class `Shape` was left as a placeholder (`pass`) because it's not a real function that can be implemented. It's intended to be overridden by the derived classes to provide the actual calculation for their area.